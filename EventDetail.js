import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  Image,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  Modal,
  Pressable,
  ActivityIndicator,
} from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';
import axios from 'axios';

export default function EventDetail({ username }) {
  const navigation = useNavigation();
  const route = useRoute();
  const { id } = route.params; // Expecting maSuKien as id from navigation
  const API_BASE = 'http://172.17.154.189:8084/api';

  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [reviewStars, setReviewStars] = useState(null);
  const [reviewContent, setReviewContent] = useState('');
  const [reviews, setReviews] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);

  const fetchEvent = useCallback(async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${API_BASE}/sukien/get/${id}`);
      setEvent(response.data);
      setLoading(false);
    } catch (err) {
      console.error('L·ªói khi l·∫•y chi ti·∫øt s·ª± ki·ªán:', err.response?.data || err.message);
      setError('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt s·ª± ki·ªán.');
      setLoading(false);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }, [id, API_BASE]);

  useEffect(() => {
    fetchEvent();
  }, [fetchEvent]);

  const handleSelectStars = (stars) => {
    setReviewStars(stars);
  };

  const handleSubmitReview = () => {
    if (!reviewStars || !reviewContent) {
      Alert.alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë√°nh gi√°.');
      return;
    }
    const newReview = {
      name: username || 'Ng∆∞·ªùi d√πng ·∫©n danh',
      stars: reviewStars,
      content: reviewContent,
    };
    setReviews([...reviews, newReview]);
    setReviewStars(null);
    setReviewContent('');
  };

  const handleRegister = () => {
    if (!event) return;

    const now = new Date();
    const start = new Date(event.ngayBatDau);
    const end = new Date(event.ngayKetThuc);

    if (!username) {
      Alert.alert('Th√¥ng b√°o', 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng k√Ω s·ª± ki·ªán.');
      return;
    }

    if (now > end) {
      Alert.alert('S·ª± ki·ªán ƒë√£ k·∫øt th√∫c', 'B·∫°n kh√¥ng th·ªÉ ƒëƒÉng k√Ω.');
      return;
    }

    if (now >= start && now <= end) {
      Alert.alert('S·ª± ki·ªán ƒëang di·ªÖn ra', 'Kh√¥ng th·ªÉ ƒëƒÉng k√Ω v√†o l√∫c n√†y.');
      return;
    }

    if (event.trangThaiSuKien === 'H·∫øt ch·ªó' || event.trangThaiSuKien === 'H·∫øt h·∫°n ƒëƒÉng k√Ω') {
      Alert.alert('Kh√¥ng th·ªÉ ƒëƒÉng k√Ω', `S·ª± ki·ªán ${event.trangThaiSuKien.toLowerCase()}!`);
      return;
    }

    navigation.navigate('DKEvent', { id: event.maSuKien });
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#007bff" />
        <Text style={{ textAlign: 'center', marginTop: 10 }}>ƒêang t·∫£i...</Text>
      </View>
    );
  }

  if (error || !event) {
    return (
      <View style={styles.container}>
        <Text style={{ textAlign: 'center', fontSize: 16, color: '#555' }}>
          {error || 'Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán.'}
        </Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      {/* Chi ti·∫øt s·ª± ki·ªán */}
      <View style={styles.card}>
        <TouchableOpacity onPress={() => setModalVisible(true)}>
          <Image
            source={{ uri: `${API_BASE}/sukien/get/img/${event.anhSuKien}` }}
            style={styles.image}
            onError={() => Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh s·ª± ki·ªán.')}
          />
        </TouchableOpacity>
        <Text style={styles.title}>{event.tenSuKien}</Text>
       
        <Text style={styles.info}><Text style={styles.label}>B·∫ÆT ƒê·∫¶U:</Text> {new Date(event.ngayBatDau).toLocaleString('vi-VN')}</Text>
        <Text style={styles.info}><Text style={styles.label}>K·∫æT TH√öC:</Text> {new Date(event.ngayKetThuc).toLocaleString('vi-VN')}</Text>
        <Text style={styles.info}><Text style={styles.label}>ƒê·ªäA ƒêI·ªÇM:</Text> {event.diaDiem}</Text>
        <Text style={styles.info}><Text style={styles.label}>GI√Å V√â:</Text> {parseInt(event.phiThamGia).toLocaleString()}‚Ç´</Text>
        <View style={styles.row}>
          <Text style={styles.label}>M√î T·∫¢: </Text>
          <Text style={styles.description}>{event.moTa || 'Ch∆∞a c√≥ m√¥ t·∫£'}</Text>
        </View>
        <Text style={styles.info}>
          <Text style={styles.label}>GH·∫æ NG·ªíI:</Text> {event.luongChoNgoi}
        </Text>
        <Text style={styles.info}>
          <Text style={styles.label}>TR·∫†NG TH√ÅI:</Text> {event.trangThaiSuKien || 'Ch∆∞a c·∫≠p nh·∫≠t'}
        </Text>
      

        <TouchableOpacity style={styles.registerBtn} onPress={handleRegister}>
          <Text style={styles.registerText}>ƒêƒÉng k√Ω</Text>
        </TouchableOpacity>
      </View>

      {/* ƒê√°nh gi√° s·ª± ki·ªán */}
      <View style={styles.card}>
        <Text style={styles.cardHeader}>ƒê√ÅNH GI√Å S·ª∞ KI·ªÜN</Text>
        <Text style={styles.label}>CH·ªåN S·ªê SAO:</Text>
        <View style={styles.starRow}>
          {[1, 2, 3, 4, 5].map((star) => (
            <TouchableOpacity
              key={star}
              style={[styles.starButton, reviewStars === star && styles.starSelected]}
              onPress={() => handleSelectStars(star)}
            >
              <Text style={styles.starText}>{star} ‚≠ê</Text>
            </TouchableOpacity>
          ))}
        </View>
        <Text style={styles.label}>N·ªòI DUNG ƒê√ÅNH GI√Å:</Text>
        <TextInput
          style={[styles.input, { height: 100 }]}
          multiline
          placeholder="Nh·∫≠p ƒë√°nh gi√° chi ti·∫øt..."
          value={reviewContent}
          onChangeText={setReviewContent}
        />
        <TouchableOpacity style={styles.submitBtn} onPress={handleSubmitReview}>
          <Text style={styles.submitText}>G·ª¨I ƒê√ÅNH GI√Å</Text>
        </TouchableOpacity>
      </View>

      {/* ƒê√°nh gi√° t·ª´ ng∆∞·ªùi kh√°c */}
      <View style={styles.card}>
        <Text style={styles.cardHeader}>ƒê√ÅNH GI√Å T·ª™ NG∆Ø·ªúI KH√ÅC</Text>
        {reviews.length === 0 ? (
          <Text style={{ textAlign: 'center', fontSize: 16, color: '#555' }}>
            Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.
          </Text>
        ) : (
          reviews.map((r, index) => (
            <View key={index} style={styles.reviewItem}>
              <Text style={styles.reviewerName}>üë§ {r.name}</Text>
              <Text style={styles.reviewStars}>‚≠ê {r.stars} sao</Text>
              <Text style={styles.reviewContent}>{r.content}</Text>
            </View>
          ))
        )}
      </View>

      {/* Modal ·∫£nh */}
      <Modal visible={modalVisible} transparent animationType="fade">
        <Pressable style={styles.modalOverlay} onPress={() => setModalVisible(false)}>
          <Image
            source={{ uri: `${API_BASE}/sukien/get/img/${event.anhSuKien}` }}
            style={styles.fullImage}
            resizeMode="contain"
            onError={() => Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh s·ª± ki·ªán.')}
          />
        </Pressable>
      </Modal>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: '#f5f5f5' },
  card: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 2,
  },
  cardHeader: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 12,
    textAlign: 'center',
    color: '#007bff',
    textTransform: 'uppercase',
  },
  image: { width: '100%', height: 200, borderRadius: 10, marginBottom: 10 },
  fullImage: { width: '100%', height: '100%' },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.8)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 12, textAlign: 'center' },
  label: { fontWeight: 'bold', fontSize: 16, textTransform: 'uppercase', color: '#222' },
  info: { fontSize: 16, marginBottom: 10 },
  description: {
    fontSize: 16,
    color: '#444',
    flexShrink: 1,
    flex: 1,
    lineHeight: 22,
  },
  row: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'flex-start',
    marginBottom: 10,
  },
  registerBtn: {
    backgroundColor: '#007bff',
    paddingVertical: 12,
    borderRadius: 8,
    marginTop: 12,
  },
  registerText: { color: '#fff', textAlign: 'center', fontWeight: 'bold' },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    padding: 10,
    marginBottom: 12,
    backgroundColor: '#fff',
    fontSize: 16,
  },
  submitBtn: {
    backgroundColor: '#28a745',
    padding: 12,
    borderRadius: 8,
  },
  submitText: { color: '#fff', textAlign: 'center', fontWeight: 'bold' },
  reviewItem: {
    backgroundColor: '#eef1f7',
    padding: 12,
    borderRadius: 8,
    marginBottom: 12,
  },
  reviewerName: { fontWeight: 'bold', fontSize: 18, marginBottom: 6 },
  reviewStars: { color: '#e67e22', fontSize: 17, marginBottom: 6 },
  reviewContent: { color: '#333', fontSize: 16, lineHeight: 22 },
  starRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginVertical: 10,
  },
  starButton: {
    padding: 10,
    backgroundColor: '#f0f0f0',
    borderRadius: 6,
    flex: 1,
    marginHorizontal: 4,
  },
  starSelected: {
    backgroundColor: '#ffd700',
  },
  starText: {
    textAlign: 'center',
    fontSize: 16,
    fontWeight: 'bold',
  },
});